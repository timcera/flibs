[comment {-*- flibs -*- doctools manpage}]
[manpage_begin flibs/binarytree n 1.0]
[copyright {2019 Arjen Markus <arjenmarkus@sourceforge.net>}]
[moddesc flibs]
[titledesc {Balanced trees}]

[description]

The [strong balanced_tree.f90] and [strong balanced_tree_string.f90] source files allow you to implement
[strong "balanced trees"] of any (derived) type without having to edit the supplied source code.
The key by which the data are stored or retrieved can be an integer value ([strong balanced_tree.f90] or a string
([strong balanced_tree_string.f90]).

[example {
module MYDATA_MODULE

type MYDATA
    character(len=20) :: string
end type MYDATA

end module

module MYDATA_BTREES
    use MYDATA_MODULE, TREE_DATA => MYDATA

    include "balanced_tree.f90"
end module MYDATA_BTREES
}]

The above code defines a module [strong MYDATA_MODULE] with the derived
type that is to be stored in the balanced trees. The name of that
derived type can be anything.
[para]
It also defines a module [strong MYDATA_BTREES] which will be the module
that holds the functionality to use balanced trees:

[list_begin bullet]

[bullet]
The module [strong MYDATA_MODULE] is [strong used], but the derived type
[strong MYDATA] is renamed to the (fixed) name [strong TREE_DATA]. (This
is the name used in the generic source file.)

[bullet]
The source code for the actual routines is simply included via the
INCLUDE statement.

[bullet]
Nothing more is required, we can close the source text for the module.

[list_end]

To use a single type of balanced trees in a program, we can just use the
MYDATA_BTREES module. If you need more than one type of data in balanced
trees, then apply the same renaming trick on using the specific balanced
trees modules.

[para]
In fact the example in the source file "two_lists.f90" shows the general
technique of how to accomplish this for linked lists. The same applies
to balanced trees.

[section ROUTINES]
The source files [strong "balanced_tree.f90"] and [strong "balanced_tree_string.f90"] provide an
object-oriented interface (the difference in the interface is the type of the key):

[list_begin definitions]

[call [cmd "type(balanced_tree) :: tree"]]
The relevant derived type is [strong "balanced_tree"] in both cases. There is no need for
an explicit creation.

[call [cmd "call tree%add_data( key, data )"]]
Add a new data item to the tree. It will be stored under the given key.

[list_begin arg]

[arg_def "integer/character(len=*), intent(in) ::"  key]
The key under which the data are stored, either an integer value or a string.

[arg_def "type(tree_data), intent(in) ::"  data]
The data to be stored. Note that a [strong copy] of the actual data is stored, not a pointer to them.
This makes its use much easier, as you do not need to worry about the persistence. If the deallocation
of the data structure requires special treatment (for instance to deallocate memory accessed via pointers),
then define a [strong final] method for the data.

[list_end]
[nl]


[call [cmd "call tree%get_data( key, data, success )"]]
Get the data item from the tree stored via the given key.

[list_begin arg]

[arg_def "integer/character(len=*), intent(in) ::"  key]
The key under which the data are stored, either an integer value or a string.

[arg_def "type(tree_data), intent(out) ::"  data]
The data will be copied into this argument. (Use user-defined assignment if necessary)

[arg_def "logical, intent(out) ::"  success]
Indicates if the key was found or not. If not, then the "data" argument is untouched.

[list_end]
[nl]


[call [cmd "has_key = tree%has_key( key )"]]
Returns whether the tree holsds the given key or not.

[list_begin arg]

[arg_def "integer/character(len=*), intent(in) ::"  key]
The key under which the data may be stored, either an integer value or a string.

[list_end]
[nl]


[call [cmd "call tree%destroy"]]
Destroy the tree. All data (copies) contained in it will be destroyed as
well.
[nl]


[call [cmd "call tree%traverse( routine ) "]]
Traverse the data items of the tree and invoke a user-defined routine on the data
well.

[list_begin arg]

[arg_def "subroutine routine( key, data )"  routine]
The routine to be invoked for each data item. The interface is defined as:
[example {
    interface
        subroutine routine( key, data )
            import tree_data
            integer, intent(in)         :: key
            type(tree_data), intent(in) :: data
        end subroutine routine
    end interface

}]
[list_end]


[list_end]

Notes:
[list_begin bullet]
[bullet]
The balanced trees can only store data of the same derived type. In
that sense the code is not generic.
[bullet]
If explicit deallocation is required, use the [strong final] features
for the derived type TREE_DATA.
[bullet]
If default assignment is not adequate, use defined assignment instead.
[list_end]


[manpage_end]
